;[main]
;#authc.usernameParam = j_username
;#authc.passwordParam = j_password
;#authc.failureKeyAttribute = shiroLoginFailure
;
;jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
;jdbcRealm.permissionsLookupEnabled = false
;
;jdbcRealm.authenticationQuery = SELECT password FROM usr WHERE email = ?
;jdbcRealm.userRolesQuery = SELECT role FROM user_role WHERE user_id = (SELECT id FROM usr WHERE email = ?)
;
;dataSource = org.postgresql.Driver
;dataSource.Url = jdbc:postgresql://127.0.0.1:5432/raise_db
;dataSource.serverName = localhost
;dataSource.user = postgres
;dataSource.password = admin
;dataSource.databaseName = raise_db
;jdbcRealm.dataSource = $dataSource
;# Use Built-in Cache Manager
;builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
;securityManager.cacheManager = $builtInCacheManager
;
;securityManager.realms = $jdbcRealm
;
;[users]
;[roles]
;[urls]
;/* = authcBasic

# This is a configuration that shows how to set up Shiro to use any JDBC
# accessible database to back the authentication component of Razor.
#
# Warning: this is not extensively tested.  Bug reports are welcome, but
# please include details about the failures involved to make it easier to make
# this robust.
#
# See the Shiro documentation at http://shiro.apache.org/documentation.html
# for more details on how to configure and use Shiro.
[main]
# First, create a data source to point into our authentication database
psql                     = org.postgresql.ds.PGPoolingDataSource
psql.dataSourceName    = "Shiro PG Pool"
psql.initialConnections = 1
psql.maxConnections     = 6
psql.serverName         = localhost
# 0 is the default port
psql.portNumber         = 0
psql.databaseName       = raise_db
psql.user                = postgres
psql.password            = admin

# Next, configure Shiro to use that to extract credentials
realm             = org.apache.shiro.realm.jdbc.JdbcRealm
realm.dataSource = $psql
realm.permissionsLookupEnabled = true
;realm.saltStyle  = realm.SaltStyle.CRYPT
authc.loginUrl = /auth/login

realm.authenticationQuery = SELECT password FROM usr WHERE email = ?
realm.userRolesQuery = SELECT name FROM role WHERE id = (SELECT role_id FROM user_roles WHERE user_id = (SELECT id FROM usr WHERE email = ?))
realm.permissionsQuery      = select permission from role_permissions where role_id = (SELECT id from role WHERE name = ?)

[urls]
/ = anon
/rest/public/** = anon
/auth/** = anon
/test/public/** = anon

/test/** = authc, perms["test:**"]
/rest/save/** = authc, perms["rest:save"]
/user/** = authc, perms["user:**"]

/auth/login = authc
/logout = logout

